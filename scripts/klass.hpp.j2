#pragma once

#include "UnityResolve.hpp"
using UMethod = UnityResolve::Method;
using UTYPE = UnityResolve::UnityType;

class {{ class }}{% if base_class %} : public {{ base_class }}{% endif %}
{
    {% for p in properties %}
    template <typename T>
    class Property_{{ p.name }}
    {
    public:
        Property_{{ p.name }}() = default;

        inline Property_{{ p.name }} &operator=(const T &v)
        {
            set(v);
            return *this;
        }
        inline operator const T &() const { return get(); }
    private:
        auto set(const T value) -> void
        {
            static UMethod *method;
            if (!method) method = UnityResolve::Get("{{ module }}")->Get("{{ class }}")->Get<UnityResolve::Method>("set_{{p.name}}");
            return method->Invoke<void>(value);
        }
        auto get() -> T
        {
            static UMethod *method;
            if (!method) method = UnityResolve::Get("{{ module }}")->Get("{{ class }}")->Get<UnityResolve::Method>("get_{{p.name}}");
            return method->Invoke<T>();
        }
    };
public:
    Property_{{ p.name }}<{{ p.type }}> {{ p.name }};
    {% endfor %}
    {% for m in methods %}
    inline static auto {{m.name}}({%- for t in m.args -%}const {% if t.name and t.type %}{{t.type}} {{t.name}}{% else %}{{t}} arg{{loop.index0}}{{ ", " if not loop.last }}{% endif %}{%- endfor -%}) -> {{m.rtype}}
    {
        static UMethod *method;                                                                                                                                                                        \
        if (!method) method = UnityResolve::Get("{{ module }}")->Get("{{ class }}")->Get<UMethod>("{{ m.name }}");                                                                                                           \
        return method->Invoke<{{ m.rtype }}>({%- for t in m.args -%}{% if t.name %}{{ t.name }}{% else %}arg{{loop.index0}}{{ ", " if not loop.last }}{% endif %}{%- endfor -%});                                                                                                                                                             \
    }
    {% endfor %}
};
